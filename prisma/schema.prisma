// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  name          String
  phone         String    @unique
  password_hash String
  is_valid      Boolean   @default(false)
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  deleted_at    DateTime?

  services    Service[]
  evaluations Evaluation[]

  @@map("users")
}

model Service {
  id           String    @id @default(uuid())
  name         String    @unique
  description  String
  is_valid     Boolean   @default(false)
  street       String
  number       Int
  neighborhood String    @default("Benderville")
  zip_code     String?
  latitude     Decimal?
  longitude    Decimal?
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  deleted_at   DateTime?

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  evaluations Evaluation[]
  Phone       Phone[]

  @@map("services")
}

model Evaluation {
  id         Int      @id
  liked      Boolean  @default(true)
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  deleted_at DateTime

  user    User   @relation(fields: [user_id], references: [id])
  user_id String

  service    Service @relation(fields: [service_id], references: [id])
  service_id String

  @@map("evaluations")
}

model Phone {
  id          Int      @id
  number      String   @unique
  is_whatsapp Boolean  @default(false)
  created_at  DateTime @default(now())
  updated_at  DateTime @updatedAt
  deleted_at  DateTime

  service    Service @relation(fields: [service_id], references: [id])
  service_id String

  @@map("phones")
}
